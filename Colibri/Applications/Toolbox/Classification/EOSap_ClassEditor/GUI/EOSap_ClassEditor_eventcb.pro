;+
; NAME:
; 
;   EOSap_ClassEditor_eventcb: Several procedures.
;
; PURPOSE:
; 
;   This is a collection of procedures for which the backbone is automatically generated by the GUI 
;   constructor in IDL 6.4.1. Specific code is added depending on the event genereated.
;
; AUTHOR:
; 
;   Luc Bertels
;   TAP - Teledetection and Earth Observation Processes 
;   VITO - Flemish Institute for Technological Research
;   Boeretang 200 
;   B-2400 Mol, Belgium 
;   http://www.vito.be
;
; CALLING SEQUENCE:
; 
;   The required event handler is called automatically as a result of the corresponding GUI action. 
;
; ARGUMENTS 
; 
;   Event:        A structure containing information depending on the event type.
; 
; KEYWORDS
; 
;   None
; 
; RETURN VALUE:
; 
;   None 
;
; KNOWN ISSUES:
; 
;   None.
;
; MODIFICATION HISTORY:
; 
; - Written by Luc Bertels, June 2010.
; - Updated for the Colibri release, February 2013.
;
;###########################################################################
;
; LICENCE
;
; This software is OSI Certified Open Source Software.
; OSI Certified is a certification mark of the Open Source Initiative.
;
; Copyright Â© 2012 Luc Bertels, Flemish Institute for Technological Research.
;
; This software is provided "as-is", without any express or implied warranty. 
; Except in case of wilful misconduct or gross negligence the authors will 
; not be held liable for any damages arising from the use of this software.
;
; Permission is granted to anyone to use this software for any
; purpose, including commercial applications, and to alter it and
; redistribute it freely, subject to the following restrictions:
;
; 1. The origin of this software must not be misrepresented; you must
;    not claim you wrote the original software. If you use this software
;    in a product, an acknowledgment in the product documentation
;    would be appreciated, but is not required.
;
; 2. Altered source versions must be plainly marked as such, and must
;    not be misrepresented as being the original software.
;
; 3. This notice may not be removed or altered from any source distribution.
;
; 4. This licence is subject to Belgian Law.
;
; For more information on Open Source Software, visit the Open Source
; web site: http://www.opensource.org.
;
;###########################################################################
;
; 
; IDL Event Callback Procedures
; EOSap_ClassEditor_eventcb
; 
; Generated on:	02/19/2013 10:27.11
; 
;-----------------------------------------------------------------
; Notify Realize Callback Procedure.
; Argument:
;   wWidget - ID number of specific widget.
;   
;   
;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_ClassEditor_CreateObject, wWidget
  TplObj  = obj_new('EOSap_ClassEditor', wWidget)
  widget_control, wWidget, set_uvalue=TplObj
end
;-----------------------------------------------------------------
; Kill Notify Callback Procedure.
; Argument:
;   wWidget - ID number of specific widget.
;   
;   
;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_ClassEditor_DestroyObject, wWidget
  widget_control, wWidget, get_uvalue=StandardObj
  widget_control, wWidget, /destroy
  obj_destroy, StandardObj
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_ClassEditor_Handle_Classified_Image_File_Input, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->Handle_Classified_Image_File_Input
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_ClassEditor_Handle_Classified_Image_File_Output, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->Handle_Classified_Image_File_Output
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_ClassEditor_Handle_Change_Accept, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->Handle_Change_Accept
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_ClassEditor_Handle_Add_New_Class, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->Handle_Add_New_Class
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_ClassEditor_Handle_Save_Changes, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->Handle_Save_Changes
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_Handle_test, Event

end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_ClassEditor_Handle_vito_info, Event
  _Handle_About, Event
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_ClassEditor_handle_info, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->handle_info
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_ClassEditor_handle_quit_or_cancel, Event
  widget_control, Event.top, get_uvalue=StandardObj
  widget_control, Event.top, /destroy
  obj_destroy, StandardObj
end
; 
; Empty stub procedure used for autoloading.
; 
pro EOSap_ClassEditor_eventcb
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_ClassEditor_Handle_Change_Reset, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->handle_change_reset
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_ClassEditor_Handle_Delete_New_Class, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->Handle_Delete_New_Class
end
