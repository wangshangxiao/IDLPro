;+
; NAME:
; 
;   EOSap_Smoothing_eventcb: Several procedures.
;
; PURPOSE:
; 
;   This is a collection of procedures for which the backbone is automatically generated by the GUI 
;   constructor in IDL 6.4.1. Specific code is added depending on the event genereated.
;
; AUTHOR:
; 
;   Luc Bertels
;   TAP - Teledetection and Earth Observation Processes 
;   VITO - Flemish Institute for Technological Research
;   Boeretang 200 
;   B-2400 Mol, Belgium 
;   http://www.vito.be
;
; CALLING SEQUENCE:
; 
;   The required event handler is called automatically as a result of the corresponding GUI action. 
;
; ARGUMENTS 
; 
;   Event:        A structure containing information depending on the event type.
; 
; KEYWORDS
; 
;   None
; 
; RETURN VALUE:
; 
;   None 
;
; KNOWN ISSUES:
; 
;   None.
;
; MODIFICATION HISTORY:
; 
; - Written by Luc Bertels, June 2010.
;
;###########################################################################
;
; LICENCE
;
; This software is OSI Certified Open Source Software.
; OSI Certified is a certification mark of the Open Source Initiative.
;
; Copyright Â© 2012 Luc Bertels, Flemish Institute for Technological Research.
;
; This software is provided "as-is", without any express or implied warranty. 
; Except in case of wilful misconduct or gross negligence the authors will 
; not be held liable for any damages arising from the use of this software.
;
; Permission is granted to anyone to use this software for any
; purpose, including commercial applications, and to alter it and
; redistribute it freely, subject to the following restrictions:
;
; 1. The origin of this software must not be misrepresented; you must
;    not claim you wrote the original software. If you use this software
;    in a product, an acknowledgment in the product documentation
;    would be appreciated, but is not required.
;
; 2. Altered source versions must be plainly marked as such, and must
;    not be misrepresented as being the original software.
;
; 3. This notice may not be removed or altered from any source distribution.
;
; 4. This licence is subject to Belgian Law.
;
; For more information on Open Source Software, visit the Open Source
; web site: http://www.opensource.org.
;
;###########################################################################
;
; 
; IDL Event Callback Procedures
; EOSap_Smoothing_eventcb
; 
; Generated on: 04/24/2009 14:36.38
; 
;-----------------------------------------------------------------
; Notify Realize Callback Procedure.
; Argument:
;   wWidget - ID number of specific widget.
;   
;   
;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_Create_Object, wWidget
  TplObj  = obj_new('EOSap_Smoothing', wWidget)
  widget_control, wWidget, set_uvalue=TplObj
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_Handle_Cancel, Event
  wWidget = Event.top
  widget_control, wWidget, get_uvalue=StandardObj
  widget_control, wWidget, /destroy
  obj_destroy, StandardObj
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro Handle_About_Info, Event
    _Handle_About, Event
end
;-----------------------------------------------------------------
; 
; Empty stub procedure used for autoloading.
; 
pro EOSap_Smoothing_eventcb
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_set_smooth_factor, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->Handle_Set_Smoothfactor, 'Smooth_factor'
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_set_zero_out, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->Handle_Set_Smoothfactor, 'Zero_out'
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_set_remove, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->Handle_Set_Smoothfactor, 'Remove'
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_set_ignore, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->Handle_Set_Smoothfactor, 'Ignore'
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_clear_settings, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->handle_clear_settings
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_select_all, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->handle_select_all
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_select_image_file, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->handle_select_image_file
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_restore_smoothing_params, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->handle_restore_smoothing_params
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_save_smoothing_params, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->handle_save_smoothing_params
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_add_scenario, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->handle_add_scenario
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_remove_scenario, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->handle_remove_scenario
end
;-----------------------------------------------------------------
; List Select Item Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_LIST, ID:0L, TOP:0L, HANDLER:0L, INDEX:0L, CLICKS:0L}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   INDEX returns the index of the selected item. This index can be 
;       used to subscript the array of names originally used to set 
;       the widget's value. The CLICKS field returns either 1 or 2, 
;       depending upon how the list item was selected. If the list 
;       item is double-clicked, CLICKS is set to 2.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_bands_select, Event
  widget_control, Event.Top, get_uvalue=StandardObj
  StandardObj->handle_bands_select
end
;-----------------------------------------------------------------
; List Select Item Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_LIST, ID:0L, TOP:0L, HANDLER:0L, INDEX:0L, CLICKS:0L}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   INDEX returns the index of the selected item. This index can be 
;       used to subscript the array of names originally used to set 
;       the widget's value. The CLICKS field returns either 1 or 2, 
;       depending upon how the list item was selected. If the list 
;       item is double-clicked, CLICKS is set to 2.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_smf_select, Event
  widget_control, Event.Top, get_uvalue=StandardObj
  StandardObj->handle_smf_select
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_input_directory, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->handle_input_directory
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_output_directory, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->handle_output_directory
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_set_interpolate, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->handle_set_interpolate
end
;-----------------------------------------------------------------
; List Select Item Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_LIST, ID:0L, TOP:0L, HANDLER:0L, INDEX:0L, CLICKS:0L}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   INDEX returns the index of the selected item. This index can be 
;       used to subscript the array of names originally used to set 
;       the widget's value. The CLICKS field returns either 1 or 2, 
;       depending upon how the list item was selected. If the list 
;       item is double-clicked, CLICKS is set to 2.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_scenario_select, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->handle_scenario_select
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_Handle_vito_info, Event
  _Handle_About, Event
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_start, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->handle_start
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_info, Event
  widget_control, Event.top, get_uvalue=StandardObj
  StandardObj->handle_info
end
;-----------------------------------------------------------------
; Activate Button Callback Procedure.
; Argument:
;   Event structure:
;   
;   {WIDGET_BUTTON, ID:0L, TOP:0L, HANDLER:0L, SELECT:0}
;   
;   ID is the widget ID of the component generating the event. TOP is 
;       the widget ID of the top level widget containing ID. HANDLER 
;       contains the widget ID of the widget associated with the 
;       handler routine.

;   SELECT is set to 1 if the button was set, and 0 if released. 
;       Normal buttons do not generate events when released, so 
;       SELECT will always be 1. However, toggle buttons (created by 
;       parenting a button to an exclusive or non-exclusive base) 
;       return separate events for the set and release actions.

;   Retrieve the IDs of other widgets in the widget hierarchy using 
;       id=widget_info(Event.top, FIND_BY_UNAME=name)

;-----------------------------------------------------------------
pro EOSap_Smoothing_handle_quit_or_cancel, Event
  widget_control, Event.top, get_uvalue=StandardObj
  widget_control, Event.top, /destroy
  obj_destroy, StandardObj
end
